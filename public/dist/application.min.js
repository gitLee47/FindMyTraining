"use strict";var ApplicationConfiguration=function(){var applicationModuleName="findmytrainingcom",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.bootstrap.datetimepicker"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("coursecategories"),ApplicationConfiguration.registerModule("locations"),ApplicationConfiguration.registerModule("results"),ApplicationConfiguration.registerModule("trainingproviders"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","$location","Locations","Coursecategories",function($scope,Authentication,$location,Locations,Coursecategories){$scope.authentication=Authentication,twttr.widgets.load(),$scope.search=function(){$location.path("results/"+this.city+"/"+this.courseCategory)},$scope.getDropDowns=function(){$scope.locations=Locations.query(),$scope.coursecategories=Coursecategories.query()}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("coursecategories").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Course Categories","coursecategories","dropdown","/coursecategories(/create)?"),Menus.addSubMenuItem("topbar","coursecategories","List Categories","coursecategories"),Menus.addSubMenuItem("topbar","coursecategories","New Category","coursecategories/create")}]),angular.module("coursecategories").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCoursecategories",{url:"/coursecategories",templateUrl:"modules/coursecategories/views/list-coursecategories.client.view.html"}).state("createCoursecategory",{url:"/coursecategories/create",templateUrl:"modules/coursecategories/views/create-coursecategory.client.view.html"}).state("viewCoursecategory",{url:"/coursecategories/:coursecategoryId",templateUrl:"modules/coursecategories/views/view-coursecategory.client.view.html"}).state("editCoursecategory",{url:"/coursecategories/:coursecategoryId/edit",templateUrl:"modules/coursecategories/views/edit-coursecategory.client.view.html"})}]),angular.module("coursecategories").controller("CoursecategoriesController",["$scope","$stateParams","$location","Authentication","Coursecategories",function($scope,$stateParams,$location,Authentication,Coursecategories){$scope.authentication=Authentication,$scope.create=function(){var coursecategory=new Coursecategories({courseName:this.courseName,courseDescription:this.courseDescription,targetAudience:this.targetAudience,preRequisites:this.preRequisites});coursecategory.$save(function(response){$location.path("coursecategories"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(coursecategory){if(coursecategory){coursecategory.$remove();for(var i in $scope.coursecategories)$scope.coursecategories[i]===coursecategory&&$scope.coursecategories.splice(i,1)}else $scope.coursecategory.$remove(function(){$location.path("coursecategories")})},$scope.update=function(){var coursecategory=$scope.coursecategory;coursecategory.$update(function(){$location.path("coursecategories")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.coursecategories=Coursecategories.query()},$scope.findOne=function(){$scope.coursecategory=Coursecategories.get({coursecategoryId:$stateParams.coursecategoryId})}}]),angular.module("coursecategories").factory("Coursecategories",["$resource",function($resource){return $resource("coursecategories/:coursecategoryId",{coursecategoryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("locations").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Locations","locations","dropdown","/locations(/create)?"),Menus.addSubMenuItem("topbar","locations","List Locations","locations"),Menus.addSubMenuItem("topbar","locations","New Location","locations/create")}]),angular.module("locations").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLocations",{url:"/locations",templateUrl:"modules/locations/views/list-locations.client.view.html"}).state("createLocation",{url:"/locations/create",templateUrl:"modules/locations/views/create-location.client.view.html"}).state("viewLocation",{url:"/locations/:locationId",templateUrl:"modules/locations/views/view-location.client.view.html"}).state("editLocation",{url:"/locations/:locationId/edit",templateUrl:"modules/locations/views/edit-location.client.view.html"})}]),angular.module("locations").controller("LocationsController",["$scope","$stateParams","$location","Authentication","Locations",function($scope,$stateParams,$location,Authentication,Locations){$scope.authentication=Authentication,$scope.create=function(){var location=new Locations({city:this.city,state:this.state,country:this.country});location.$save(function(response){$location.path("locations"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(location){if(location){location.$remove();for(var i in $scope.locations)$scope.locations[i]===location&&$scope.locations.splice(i,1)}else $scope.location.$remove(function(){$location.path("locations")})},$scope.update=function(){var location=$scope.location;location.$update(function(){$location.path("locations")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.locations=Locations.query()},$scope.findOne=function(){$scope.location=Locations.get({locationId:$stateParams.locationId})}}]),angular.module("locations").factory("Locations",["$resource",function($resource){return $resource("locations/:locationId",{locationId:"@_id"},{update:{method:"PUT"}})}]),angular.module("results").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Courses","results","dropdown","/results(/create)?"),Menus.addSubMenuItem("topbar","results","List Courses","view-courses"),Menus.addSubMenuItem("topbar","results","New Course","results/create")}]),angular.module("results").config(["$stateProvider",function($stateProvider){$stateProvider.state("view-courses",{url:"/view-courses",templateUrl:"modules/results/views/view-courses.client.view.html"}).state("searchResults",{url:"/results/:city/:courseCategory",templateUrl:"modules/results/views/list-results.client.view.html"}).state("createResult",{url:"/results/create",templateUrl:"modules/results/views/create-result.client.view.html"}).state("viewResult",{url:"/results/:resultId",templateUrl:"modules/results/views/view-result.client.view.html"}).state("editResult",{url:"/results/:resultId/edit/1",templateUrl:"modules/results/views/edit-result.client.view.html"})}]),angular.module("results").controller("ResultsController",["$scope","$stateParams","$location","Authentication","Results","Locations","Coursecategories","Trainingproviders",function($scope,$stateParams,$location,Authentication,Results,Locations,Coursecategories,Trainingproviders){$scope.authentication=Authentication,$scope.create=function(){var result=new Results({trainingProvider:this.trainingProvider,courseCategory:this.courseCategory,city:this.city,deliveryType:this.deliveryType,timing:this.timing,duration:this.duration,durationType:this.durationType,dateFrom:this.dateFrom,dateTo:this.dateTo,price:this.price,currency:this.currency});result.$save(function(response){$location.path("view-courses"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(result){if(result){result.$remove();for(var i in $scope.results)$scope.results[i]===result&&$scope.results.splice(i,1)}else $scope.result.$remove(function(){$location.path("view-courses")})},$scope.update=function(){var result=$scope.result;result.$update(function(){$location.path("view-courses"),$scope.trainingProvider=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.results=Results.query({city:"viewer",courseCategory:"viewer"})},$scope.getDropDowns=function(){$scope.locations=Locations.query(),$scope.coursecategories=Coursecategories.query(),$scope.trainingproviders=Trainingproviders.query()},$scope.searchResults=function(){$scope.results=Results.query({city:$stateParams.city,courseCategory:$stateParams.courseCategory})},$scope.findOne=function(){$scope.result=Results.get({resultId:$stateParams.resultId})}}]),angular.module("results").factory("Results",["$resource",function($resource){return $resource("results/:resultId",{resultId:"@_id"},{update:{method:"PUT"}})}]),angular.module("trainingproviders").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Trainingproviders","trainingproviders","dropdown","/trainingproviders(/create)?"),Menus.addSubMenuItem("topbar","trainingproviders","List Trainingproviders","trainingproviders"),Menus.addSubMenuItem("topbar","trainingproviders","New Trainingprovider","trainingproviders/create")}]),angular.module("trainingproviders").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTrainingproviders",{url:"/trainingproviders",templateUrl:"modules/trainingproviders/views/list-trainingproviders.client.view.html"}).state("createTrainingprovider",{url:"/trainingproviders/create",templateUrl:"modules/trainingproviders/views/create-trainingprovider.client.view.html"}).state("viewTrainingprovider",{url:"/trainingproviders/:trainingproviderId",templateUrl:"modules/trainingproviders/views/view-trainingprovider.client.view.html"}).state("editTrainingprovider",{url:"/trainingproviders/:trainingproviderId/edit",templateUrl:"modules/trainingproviders/views/edit-trainingprovider.client.view.html"})}]),angular.module("trainingproviders").controller("TrainingprovidersController",["$scope","$stateParams","$location","Authentication","Trainingproviders",function($scope,$stateParams,$location,Authentication,Trainingproviders){$scope.authentication=Authentication,$scope.create=function(){var trainingprovider=new Trainingproviders({companyName:this.companyName,url:this.url,description:this.description,address:this.address,city:this.city,country:this.country,contactNo:this.contactNo,email:this.email,contact1:[],contact2:[],trainer1:[],trainer2:[],trainer3:[],trainer4:[],trainer5:[]});trainingprovider.contact1.push({cName:this.contact1.cName,cEmail:this.contact1.cEmail,cPhone:this.contact1.cPhone}),trainingprovider.contact2.push({cName:this.contact2.cName,cEmail:this.contact2.cEmail,cPhone:this.contact2.cPhone}),trainingprovider.trainer1.push({trainerName:this.trainer1.trainerName,profile:this.trainer1.profile,photo:this.trainer1.photo}),trainingprovider.trainer2.push({trainerName:this.trainer2.trainerName,profile:this.trainer2.profile,photo:this.trainer2.photo}),trainingprovider.trainer3.push({trainerName:this.trainer3.trainerName,profile:this.trainer3.profile,photo:this.trainer3.photo}),trainingprovider.trainer4.push({trainerName:this.trainer4.trainerName,profile:this.trainer4.profile,photo:this.trainer4.photo}),trainingprovider.trainer5.push({trainerName:this.trainer5.trainerName,profile:this.trainer5.profile,photo:this.trainer5.photo}),trainingprovider.$save(function(response){$location.path("trainingproviders"),$scope.companyName=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(trainingprovider){if(trainingprovider){trainingprovider.$remove();for(var i in $scope.trainingproviders)$scope.trainingproviders[i]===trainingprovider&&$scope.trainingproviders.splice(i,1)}else $scope.trainingprovider.$remove(function(){$location.path("trainingproviders")})},$scope.update=function(){var trainingprovider=$scope.trainingprovider;trainingprovider.$update(function(){$location.path("trainingproviders")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.trainingproviders=Trainingproviders.query()},$scope.findOne=function(){$scope.trainingprovider=Trainingproviders.get({trainingproviderId:$stateParams.trainingproviderId})}}]),angular.module("trainingproviders").factory("Trainingproviders",["$resource",function($resource){return $resource("trainingproviders/:trainingproviderId",{trainingproviderId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);